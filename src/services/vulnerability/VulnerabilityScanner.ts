import Dockerode, { ContainerCreateOptions } from 'dockerode';
import { runInDocker } from './dockerUtils';
import { ToolContext } from '../../ai/tools/ToolTypes';
import { readFile } from 'fs/promises';

interface VulnerabilityScanResults {
  Issues: Array<{
    severity: string;
    confidence: string;
    cwe: {
      id: string;
      url: string;
    };
    rule_id: string;
    details: string;
    file: string;
    code: string;
    line: string;
    column: string;
    nosec: boolean;
    // suppressions: Array<string>;
  }>;
  Stats: {
    files: number;
    lines: number;
    nosec: number;
    found: number;
  };
}

const levels = {
  LOW: 0,
  MEDIUM: 1,
  HIGH: 2,
};
type Severity = keyof typeof levels;

export default class VulnerabilityScanner {
  private docker: Dockerode;

  constructor() {
    this.docker = new Dockerode();
  }

  async scanAndReportOnRepo(context: ToolContext, project: string): Promise<string> {
    const jsonStr = await this.scanRepo(context, project);
    const results = this.parseResults(jsonStr);
    results.Issues = results.Issues.sort((a, b) => levels[b.severity as Severity] - levels[a.severity as Severity]);

    console.info('issues', JSON.stringify(results.Issues, null, 2));
    return this.reportResults(context, results);
  }

  async reportResults(context: ToolContext, results: VulnerabilityScanResults): Promise<string> {
    let report = '';
    const { git } = context;

    for (const issue of results.Issues) {
      report += `# ${issue.severity} severity issue in ${issue.file} - Line ${issue.line}, Column: ${issue.column}\n`;
      report += `Confidence: ${issue.confidence}\nCWE: ${issue.cwe.id}\nRule: ${issue.rule_id}\nDetails: ${issue.details}\nNoSec: ${issue.nosec}\n`;

      const blame = await git.blame(issue.file);
      report += `Author: ${blame?.author_name} <${blame?.author_email}>\nDate: ${blame?.date}\n\n`;
      report += '```go\n';
      report += issue.code;
      report += '\n```\n\n';
    }

    return report;
  }

  parseResults(jsonStr: string): VulnerabilityScanResults {
    return JSON.parse(jsonStr);
  }

  /**
   * resolves a JSON string with VulnerabilityScanResults
   */
  async scanRepo(context: ToolContext, project: string): Promise<string> {
    const localPath = `${context.workspaceFolder.replaceAll('\\', '/')}/${project}`;
    const volume = `/${project}`;
    const args = ['-fmt=json', '-out=results.json', `/${project}/...`];

    const containerCreateOpts: ContainerCreateOptions = {
      WorkingDir: `/${project}/`,
      HostConfig: {
        Binds: [`${localPath}:${volume}`],
      },
    };
    const result = await runInDocker(context, 'securego/gosec', containerCreateOpts, ...args);
    // console.log('VulnerabilityScanner.scanRepo', result);
    // return result;

    const jsonStr = await readFile(`${localPath}/results.json`, 'utf-8');
    // console.info('VulnerabilityScanner.scanRepo', jsonStr);
    return jsonStr;
  }
}
